name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  build_and_test:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'

      - run: |
          rustc --version
          cargo --version
          rustup --version
      - run: cargo check
      - run: rustup component add clippy rustfmt
      - run: cargo fmt --all -- --check
      - run: cargo clippy --all-targets --all-features -- -D warnings
      - run: cargo test --all-targets --all-features
      - run: cargo test --features http-async
      - run: cargo test --features mmap-async-tokio
      - run: cargo test --features tilejson
      - run: cargo test --features s3-async-native
      - run: cargo test --features s3-async-rustls
      - run: cargo test
      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@v2

  msrv:
    name: Test MSRV
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
      - name: Read crate metadata
        id: metadata
        run: echo "rust-version=$(sed -ne 's/rust-version *= *\"\(.*\)\"/\1/p' Cargo.toml)" >> $GITHUB_OUTPUT
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.metadata.outputs.rust-version }}
      - run: cargo test --all-targets --all-features
      - run: cargo test --features http-async
      - run: cargo test --features mmap-async-tokio
      - run: cargo test --features tilejson
      - run: cargo test --features s3-async-native
      - run: cargo test --features s3-async-rustls
      - run: cargo test
